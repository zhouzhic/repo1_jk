1、项目介绍(先说项目再说技术)
2、sql优化、数据库优化
	1.sql的执行顺序：from 表名 where 条件 ，执行顺序是从后往前，where条件后面的语句尽可能缩短where
	数据执行的范围。先group by  后order by  select 查询
	2.避免过多的联查，设计合理的表关系
	3.遵守常见sql规范，尽可能减少*，
	4.如果表字段过多，经常展示的字段较少，对表进行纵切割。（从表的中间进行切割成两张表）
	5.如果单个表的数量过大，利用业务逻辑采用横切割，注册用手机号前三位来分表邮箱类型来分表，
	6.适度冗余减少关联查询
	7.采用读写分离机制降低单个数据库压力
	8.适当建立索引（数据超过5万条，十万条，才有作用，索引分为单个索引和复合索引）提高查询效率
        9.合理使用exists 和not exists ，not exists 的效率高于exists）
        10. 尽量避免使用临时表，减少与数据库的交互

3、jvm优化
	JVM  优化主要是解决java的  GC （垃圾回收）问题。
	JVM  的使用过程中有各中代，年轻带主要存放，新创建对象。 年老代，年老代存放从年轻代存活的
	对象。持久代用 于存放静态文件，如Java类、方法等。一般持久代可以设置大一点。
	垃圾回收有，串行收集器、并行收集器、并发收集器。
	o   串行处理器：
	 --适用情况：数据量比较小（100M左右）；单处理器下并且对响应时间无要求的应用。
	 --缺点：只能用于小型应用
	o   并行处理器：
	 --适用情况：“对吞吐量有高要求”，多CPU、对应用响应时间无要求的中、大型应用。
	 举例：后台处理、科学计算。（例如 ERP   银行系统）
	 --缺点：应用响应时间可能较长
	o   并发处理器：
	 --适用情况：“对响应时间有高要求”，多CPU、对应用响应时间有较高要求的中、大型应用。
	 举例：Web服务器/应用服务器、电信交换、集成开发环境。（例如互联网网站）
	设置jvm堆大小 ，32bit  1.5-2G  64bit  可以超过 2G  新版的JDK 每个线程的堆大小在1M
	改变这个线程所占用的堆大小，可以生成更多的线程，一般项目里线程数不能超过5000个

4、tomcat优化
	tomcat优化我们主要从三方面优化，一是内存优化，tomcat内存优化主要是对tomcat启动参数优化，
	我们可以在 tomcat 的启动脚本catalina.sh 中设置 java_OPTS 参数，通过Xms来初始化虚拟机最小内存
	Xmx来初始化虚拟机可使用的最大内存，二是并发优化，通过配置server.xml里的Connector标签，在标
	签里配置maxThreads客户请求最大线程数、minSpareThreads 初始化时创建的socket线程数
	maxSpareThreads连接器的最大空闲socket线程数，connectionTimeout 连接的超时时间，minProcessors
	服务器创建时的最小处理线程数，maxProcessors服务器同时最大处理线程数，三是缓存优化，配置compression
	打开压缩功能
5、hashMap底层
	HashMap底层实现是一个线性数组Entry。	
	HashMap其实也是一个线性的数组实现的,所以可以理解为存储数据的容器就是一个线性数组。
	首先HashMap里面实现一个静态内部类Entry，重要的属性有 key , value, next，从属性key,value
	我们就能很明显的看出来Entry就是HashMap键值对实现的一个基础bean，所以说到HashMap的基础就是
	一个线性数组，Map里面的内容都保存在Entry[]里面。
5.1、如果HashMap的大小超过了负载因子定义的容量，怎么办？
	hashMap默认的负载因子大小为0.75，也就是说，当一个map填满了75%的bucket时候，和其它集合
	类(如ArrayList等)一样，将会创建原来HashMap大小的两倍的bucket数组，来重新调整map的大小，
	并将原来的对象放入新的bucket数组中。这个过程叫作rehashing，因为它调用hash方法找到新的
	bucket位置。
5.2、HashMap 和 HashTable 区别?
	
5.3为什么HashMap线程不安全？HashTable线程安全？	

6、nginx+tomcat集群怎么配置的
	首先开启每个tomcat的集群策略，在每个tomcat的service.xml中添加Cluster标签，然后在Engine标签里配置
	上jvmRoute，每台tomcat的jvmRoute配置的名称要一样，这样也就解决了session共享的问题了，nginx的话打开
	我们的nginx.conf配置文件，在里边配置集群的负载策略，nginx里边支持轮询、权重、ip_hash等策略，由于我
	门的服务器在硬件配置上一样，所以我们采了ip_hash策略，ip_hash 也就是说一个用户第一次访问nginx，nginx
	会将第一分发的请求服务器ip地址记录下来，下次访问的时候，发现之前有过访问，就会将第二次的访问还分发到
	第一次访问的服务器上。如果刚好分发的服务器宕机了，nginx就会自动给你分配到一个新的服务器上。
7、poi导出10万数据解决内存溢出
	poi在3.8版本后开始支持大数据的导出，首先new一个SXSSFWorkbook，并设置内存中最多放5000条数据，之后的数
	据poi会自己写成临时文件存到到服务器的物理硬盘中，通过线程池将所有数据导完后会自动合成一个excel文件，
	然后调用workbook.dispose();清除服务器上的poi临时文件，然后我们通过IO流将这个excel响应给浏览器下载，
	最后将服务器上的excel删除掉。
8、mysql读写分离，主从同步怎么配置的，如何降低延迟
	读写分离配置：在项目中我们配置了两个数据源，一个主数据库的，一个是从数据库的，在事务配置的时候，我们给
	从的数据dataSource配置了只读事务，在项目中根据操作判断注入不同的数据源，如果是增删改操作的注入主的数据
	源，所有的查询操作注入从的数据源，
	主从同步配置：首先找到主数据库的my.ini文件，在里边配置server-id 每个数据库的server-id不能重复要保证唯一,
	配置binlog-do-db指明需要同步的数据库，log-bin来指明日志文件，配置完后，重启主数据库的服务，登陆主数据库，
	创建一个用于从数据库访问的用户，然后通过show master status;查询出主数据库的状态，记录下它的File和Position
	的值，紧接着配置从数据库，找到从数据库的my.ini文件，在里边配置server-id，log-bin和replicate-do-db 
	指明需要同步的数据库，然后重启从数据库的服务，重启完后登陆从数据库，创建从数据库对主数据库的连接，
	master_log_file要和刚才主数据库查询的File字段内容一致，master_log_pos要和主数据库刚才查出的Position一致，
	然后通过slave start，来启动从数据库，这样主从同步就配置好了。
	如何降低延迟：
	1.主库和从库尽可能在同一个局域网内，交换机网卡采用千兆网卡。
	2.主数据库更新完成之后产生的操作日志不是瞬间产生的，我们可以通过设置sync_binlog=1, 
	让它瞬间产生磁盘日志，（n=1指主数据库只要操作一次，就产生一次磁盘日志，n=10，就是操作10次，产生一次），
	从数据库可以依赖磁盘日志，瞬间产生同步，可以达到降低延迟的效果。
	3. 设置主库和从库读取日志失败之后，及时重新建立连接，延迟缩短、默认5秒。
9、redis在项目中怎么使用的，代码怎么写的，怎么和spring整合的
	我们在项目中用redis来做缓存，我们在登陆的时候将用户登陆时获取的验证码存放到了redis中，并设置了验证码的有
	效期为30分钟，当用户登陆时我们从redis中获取出用户的点击时获取的验证码，如果获取不到直接返回前台，并返回
	相应的错误码，否者取出redis中的验证码和前台传过来的验证码进行比较，我们还用redis缓存了前台首页的名师、网站统计
	文章 好文推荐、活跃度统计等
	*怎么整合？
	首先导入jar包，spring-data-redis.jar 和 jedis.jar，然后在redis-conf.properties里配置上redis的链接信息，
	然后在spring-redis.xml中通过property-placeholder加载redis-conf.properties配置文件，紧接着创建一个
	JedisConnectionFactory链接redis,然后创建一个redisTemplate，在redisTemplate中配置序列化信息，最后在需要
	操作redis的地方注入redisTemplate，通过redisTemplate对redis缓存进行操作。
	*代码怎么写的?
	redisTemplate.
10、mongodb在项目中怎么使用的，代码怎么写的，怎么和spring整合的
	我们主要用mongodb来存储我们项目里面的操作日志和课程评论
	日志记录的话我们主要是结合aop来使用的，首先我们来配置一个aop的切面类，再给aop的使用规则，
	哪个类里面的哪个方法使用当前切面类，利用后置通知类获取当前方法的操作日志，将操作日志存储到mongodb，
	
	评论的话我们做的是一个树表结构，就是用户可以回复用户的评论，主要字段有
	（评论id,课程id,标题，内容，评论人，评论的发布时间）
	并且为了提高可用性和高并发用了3台服务器做了mongodb的副本集，其中一台作为主节点，另外两台作为副本节点，
	这样在任何一台mongodb服务器宕机时就会自动进行故障转移，不会影响应用程序对mongodb的操作，为了减轻主节
	点的读写压力过大的问题，我还对mongodb副本集做了读写分离，使写操作在主节点进行，读取操作在副本节点进行。
	为了控制评论，我们的评论的界面设置在了购买状态，只有购买了该课程的人才可以评论

10.1、怎么整合
	首先添加spring和mongodb整合的jar包spring-data-commons，在spring的配置文件中引入mongodb的标签头,
	在配置文件内添加mongo 标签配置链接mongodb数据库的地址和端口号，然后注入mongodb的mongoTemplate模板，在
	模板里通过constructor-arg ref 指明上面配置好的mongo数据库连接信息，通过constructor-arg name 指明要操作
	的数据库，最后将我们的mongoTemplate模板注入到我们需要操作mongodb数据的Dao层中
	代码怎么写？
11、mybatis二级缓存
	Mybatis的一级缓存是指SqlSession。一级缓存的作用域是
   一个SqlSession。Mybatis默认开启一级缓存。在同一个SqlSession中，
   执行相同的查询SQL，第一次会去查询数据库，并写到缓存中；第二次
   直接从缓存中取。当执行SQL时两次查询中间发生了增删改操作，则清空
   SqlSession的缓存清空。
	Mybatis的二级缓存是指mapper映射文件。二缓存的作用域是同
   一个namespace下的mapper映射文件内容，多个SqlSession共享。Mybatis
   需要手动设置启动二级缓存。在同一个namespace下的mapper文件中，执
   行相同的查询SQL，第一次会去查询数据库，并写到缓存中；第二次直接
   从缓存中取。当执行SQL时两次查询中间发生了增删改操作，则二级缓存
   清空。

12、webservice配置安全性，签名认证


13、设计模式
常见设计模式。
 单例模式，在整个tomcat服务里面永远只有这么一个，实例。
      1. 私有属性。
      2.  私有的构造函数。
      3.  公有的静态方法。
单例  懒汉式。（调用共有的静态方法才产生，单例对象。）
class  user{
	private Map map =null;
	private user(){
}

public static Map getMap(){
	 if(map==null){
	  map=new  HashMap();
	}
	return map；
	}
}
     饿汉式。（项目一启动就产生了）
class  User{
	private Map map = new HashMap();
	private User(){
	}
	public static  Map getMap(){
	return map;
	}
}

工厂模式：
   像一个工厂一样，调用一次就生产一间产品。
例子一：
Hibernate  的SessionFactory
  SessionFactory  每调用一次就产生一个新的session
Session   session =SessionFactory.OpenSession();
例子二：
spring的ioc 是工厂模式实现的。
    你给我一个bean  对象我就给你注入 spring容器。
代理模式：
  springAop  采用代理模式实现，你的serviceImpl 的add  方法 已经写死了，没办法改你的代码，
开启事物， 提交事物，我只有产生一个代理类，和你几乎一样。但是我代理类里面，在你执行之前
开启事物，在你的add（）之后 提交事物。
好比， 范冰冰 就是add方法， 要让她拍戏，的找他的代理经纪人。
经纪人帮他，联系预约，完了她来干活，干完活，经纪人帮他收拾摊子。
门面模式

门面模式要求一个子系统的外部与其内部的通信必须通过一个统一的门面(Facade)对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。
就如同医院的接待员一样，门面模式的门面类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与门面对象打交道，而不需要与子系统内部的很多对象打交道。
简单来讲，做一件事，或者调用一个功能必须通过这个接口。
   HibernateTemplate  可以理解为就是一个门面，要使用hibernate的方法必须，
通过它。

14、redis如何设置持久化 ？

15、redis 16个库的作用？

21、dubbo+zookeeper？

22、springmvc运行原理？

23.谈谈你对spring框架的理解？
	在我平常的工作过程中对spring的应用还是比较多的，整体感觉也没有什么，主要有两个核心 AOP和IOC，分别为控制反转/依赖注入
	和面向切面编程思想，工作过程中主要用到IOC注入这块比较多，通过spring的注入能够更加方便维护bean之间的关系，大多数的bean
	实例都是单例的，很好的节省的对内存的消耗。Spring的注入方式主要用到过构造函数注入，属性注入，注入数据的类型比较多，
	常用对象注入，也使用到过list集合注入，使用比较灵活。
	(细节准备:1.说一下IOC的原理：ioc是控制反转，依赖注入，主要用来维护bean之间的注入关系，使用工厂模式创建bean的实例，
	然后再根据xml中配置的bean的注入关系为创建好的实例注入bean对象，spring原理这块我也有一定的了解，使用spring这么长时间，
	我认为spring其实就是项目启动时加载spring的监听器，通过监听器和dom4j等解析xml技术读取spring的xml文件，把spring.xml文
	件中的所有bean标签读取到，拿到标签中的class属性，通过java的反射技术创建bean的实例，把所有创建好的bean实例放入一个
	beanMap中，beanMap的key为bean标签的ID值，value为java反射技术创建的具体实例对象，后续需要把创建好的bean注入给别的类
	使用时，其实就是通过bean的id属性从beanMap中获取对应bean实例，调用set方法把获取出来的bean注入到相关使用的实例中。
24.说一下你对aop的理解吧
	Spring的aop面向切面编程是基于代理模式实现的，它其实就是把一部分公用的代码段提取到一个实现类中，让程序在运行过程
	中把代码再拼接成完整代码执行，增强代码的可读性和高复用性，尽可能的避免重复代码的出现，但是并不是所有的业务都适
	合使用spring的aop功能。Spring的aop由切点和通知组成，通知分为前置通知、后置通知和环绕通知，我这块主要用过前置和
	后置通知。环绕通知这块大概了解过，没有深入的理解，主要把公用代码提取到前置通知和后置通知中，在代码运行过程中先
	运行前置通知方法，再运行切点方法，最后运行后置通知方法。
	注释:java反射技术可以通过类的全限定名创建对应对象，创建对象的方法是newInstance创建对应对象

25.springMVC为什么可以是单例的，而struts2必须是多例的？
	springMVC的参数都是在方法中传递的，使用的都是局部变量，该变量的生命周期仅仅存在在方法中，方法调用完毕，参数就会
	被销毁，所以即使springMVC是单例的，也不会影响到控制层方法的调用，struts2框架之所以必须是多例的，那是因为他使用
	了全局变量，通过get和set方法赋值。如果struts2框架是单例的，那么就会造成下一个请求还能看到上一个请求的参数，造成
	信息泄露和影响当前请求的正确执行，所以struts2框架要设置为多例的，每次请求创建一个新的对象，新旧对象之间参数互不
	影响，这样也就造成了struts2框架对内存的消耗大的问题。

26.谈谈你对struts2（webWork2）的看法？
	struts2这个框架很久没有用过了，基本就是前台发送请求，后台过滤器拦截分发请求，配置一个struts.xml文件，访问到具体
	的action方法，通过全局变量获取和传递参数，达到处理请求返回响应的目的。

27.如果hashmap的key出现hash冲突，如何解决？
	利用Entry类的next变量来实现链表,把最新的元素放到链表头,旧的数据则被最新的元素的next变量引用

1：JDK和JRE的区别？
	JDK：是java的开发工具包，里面包含了各种类库和工具
	JRE：是java程序的运行环境
2：java支持的数据类型有哪些？什么是自动拆装箱？什么时候自动装箱不起作用？
	2.1java中的8种基本数据类型：boolean byte char short int float double long
	2.2：基本数据类型和它对应的封装类型之间可以相互转换，从基本数据类型到封装类
	型叫做装箱，从封装类型到基本数据类型叫拆箱，自动拆装箱是jdk5.0提供的新特特性
	2.3当我们要调用的方法中存在重载的时候，即基本类型数据作为唯一参数的方法与
	该基本类型包装类作为唯一参数的方法重载，这时候自动装箱不起作用。
3：进程和线程的区别？
	进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，
一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。
线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个程序至少有一个进程,一个进
程至少有一个线程。
4：创建线程有几种不同的方式？你喜欢哪一种？为什么？
	有三种方式可以用来创建线程：
	继承Thread类
	实现Runnable接口
	应用程序可以使用Executor框架来创建线程池
	实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，
	这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。
5：如何确保N个线程可以访问N个资源同时又不导致线程死锁？
	多线程产生死锁需要四个条件，分别是互斥性，保持和请求，不可剥夺性还有要形成闭环，这四个条件缺一不可，
	只要破坏了其中一个条件就可以破坏死锁，其中最简单的方法就是线程都是以同样的顺序加锁和释放锁
	*多线程产生死锁的四个必要条件：
	互斥条件：一个资源每次只能被一个进程使用。
	保持和请求条件：一个进程因请求资源而阻塞时，对已获得资源保持不放。
	不可剥夺条件：进程已获得资源，在未使用完成前，不能被剥夺。
	循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。
6：Iterator和ListIterator的区别是什么？
	Iterator是ListIterator的父接口，Iterator是单列集合公共取出容器中元素的方式。对于List，Set都通用。而
	ListIterator是List集合的特有取出元素方式。Iterator中具备的功能只有hashNext(),next()，remove();
	ListIterator中具备着对被遍历的元素进行增删改查的方法，可以对元素进行逆向遍历。
7：HashMap和HashTable有什么区别？
	 HashMap不是线程安全的，HashMap是map接口的子类，是将键映射到值的对象，其中键和值都是对象，并且不能包
	 含重复键，但可以包含重复值。HashMap允许null key和null value，而hashtable不允许。
	 HashTable是线程安全，HashMap是Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要
	 区别在于HashMap允许空（null）键值（key）,由于非线程安全，效率上可能高于Hashtable。
7.HashMap为什么线程不安全？
	HashMap内部存储使用了一个Node数组(默认大小是16)，而Node类包含一个类型为Node的next的变量，也就是相当
	于一个链表，所有hash值相同(即产生了冲突)的key会存储到同一个链表里，
	HashMap在并发执行put操作时会引起死循环，导致CPU利用率接近100%。因为多线程会导致HashMap的Node链表形成
	环形数据结构，一旦形成环形数据结构，Node的next节点永远不为空，就会在获取Node时产生死循环。
7.2HashMap如何让其线程安全？
	一通过Collections.synchronizedMap()返回一个新的Map,这个新的map就是线程安全的，二重新改写了HashMap。
	三使用hashTable
7.3HashTable是怎么保证线程安全的？
	HashTable源码中是使用synchronized来保证线程安全的
8：如何权衡是使用无序的数组还是有序的数组？
	有序数组最大的好处：在于查找的时间复杂度是O(log n)，而无序数组是O(n)。
	有序数组的缺点是：插入操作的时间复杂度是O(n)，因为值大的元素需要往后移动来给新元素腾位置。相反，
	无序数组的插入时间复杂度是常量O(1)
9：HashSet和TreeSet有很么区别？
	1. 底层存储的数据结构不同
		HashSet底层用的是HashMap哈希表结构存储，而TreeSet底层用的是TreeMap树结构存储
	2.存储时保证数据唯一性依据不同
		HashSet是通过复写hashCode()方法和equals()方法来保证的，而HashSet通过Compareable接口的compareTo()方
	法来保证的
	3.有序性不一样
		HashSet无序，TreeSet有序
	存储原理：
		HashSet:底层数据结构是哈希表，本质就是对哈希值的存储，通过判断元素的hashCode方法和equals方法来保证
	元素的唯一性，当hashCode值不相同，就直接存储了，不用在判断equals了，当hashCode值相同时，会在判断一
	次euqals方法的返回值是否为true，如果为true则视为用一个元素，不用存储，如果为false，这些相同哈希值不
	同内容的元素都存放一个桶里（当哈希表中有一个桶结构，每一个桶都有一个哈希值）
		TreeSet:底层的数据结构是二叉树，可以对Set集合中的元素进行排序,这种结构，可以提高排序性能, 根据比较
	方法的返回值确定的,只要返回的是0.就代表元素重复
10：Java中垃圾回收有什么目的？什么时候进行垃圾回收？
	目的：回收堆内存中不再使用的对象，释放资源
	什么时候回收：可以手动调用gc，一般是系统等到新生代的内存区占满了又需要分配内存的时候，这个时候新生代就变
	成了老年代，等老年代的内存占满之后开始回收老年代所占的内存区。
11：finally代码块和finalize()方法有什么区别？
	无论是否抛出异常，finally代码块都会执行，它主要是用来释放应用占用的资源。
	finalize()方法是Object类的一个protected方法，它是在对象被垃圾回收之前由Java虚拟机来调用的。
15：什么是Servlet?
	　Servlet是一种独立于平台和协议的服务端的java技术，可以生成动态WEB页面与传统的CGI（计算机图形接口）和其
	他类似的CGI技术相比。Servlet具有更好的可移植性。更强大的功能，更少的投资，更高的效率，更好的安全性。
16：doGet()方法和doPost()方法有什么区别？
	没什么区别，就是html表单提交的method是post的调doPost、get的调doGet。而一般情况下，无论哪种method提交的表
	单，处理都一样，所以只要写一个，在另一个里调这个就行了。
17：什么是web应用程序？
18：什么是servlet链（Servlet Chaining）
19：HTTP响应的结构是什么样的？
20：什么是cookie? session和cookie有什么区别？
21：浏览器和servlet通信使用的是什么协议？
22：什么是URL编码和URL解码？
23：什么是jsp页面？
24：什么是JDBC?
25：Class.forName()方法有什么作用？
26：什么是隐式类型转换？什么是显示类型转换？
27：&& 和 &的区别，|| 和 | 的区别？
28：解释一下什么是类方法，什么是实例方法？
29：简述方法和变量的命名规则？
30：什么是方法重载？
31：如何创建一个对象？
32：简述Java的访问权限？
33：简述什么是对象上转型？
34：上转型对象可以操作什么？不可以操作什么？
35：已知一个java.util.Date对象，如何格式化成如下格式：YYYY-MM-dd hh:mm:ss
36：简述如下关键字用途 try、catch、throw、throws、finally?
37：File f = new File("myfile.dat"); FileInputStream istream = new FileInputStream(f)如何从流中获取数据？
38：实现多线程的两种方法？
39：构造方法能否被重写？为什么？
40：常用的对称加密算法有哪些？非对称加密算法有哪些？
41：session失效有哪几种方法,session的过期时间默认是多少？在哪里配置？
	sessionid丢失、服务器关闭、session过期、session.removeAttribute()
	默认30分钟
	web.xml 配置 session-config -> session-timeout 
42：如何获取Oracle序列seq_order的当前值，请写出sql语句。
43：spring是如何管理事物的？
44：通过get和post提交表单的区别是什么？
45：常用的防止页面重复提交的方式有哪些？请简要说明
46：服务端如何获取客户端的ip地址
47：java常用的加密算法有哪些？
48：简要说明 List、set和map的区别？
49：如何处理内存溢出？
50：HashMap底层实现
51：mysql 引擎MyISAM 和 InnoDB的区别?
52：一条特别长的sql执行速度特别慢，怎么去优化它？
53：spring bean的五个作用域？
54：如果HashMap的大小超过了负载因子定义的容量，怎么办？
55：JVM优化
	JVM  优化主要是解决java的  GC （垃圾回收）问题。
	JVM  的使用过程中各代有，年轻带主要存放，新创建对象。 年老代，年老代存放从年轻代存活的       对象。Perm（持久代）用 于存放静态文件，如今Java类、方法等。一般持久代可以设置大一点。
	垃圾回收有，串行收集器、并行收集器、并发收集器。
	o   串行处理器：
	 --适用情况：数据量比较小（100M左右）；单处理器下并且对响应时间无要求的应用。
	 --缺点：只能用于小型应用
	o   并行处理器：
	 --适用情况：“对吞吐量有高要求”，多CPU、对应用响应时间无要求的中、大型应用。举例：后台处理、科学计算。（例如 ERP   银行系统）
	 --缺点：应用响应时间可能较长
	o   并发处理器：
	 --适用情况：“对响应时间有高要求”，多CPU、对应用响应时间有较高要求的中、大型应用。举例：Web服务器/应用服务器、电信交换、集成开发环境。（例如互联网网站）

	设置jvm堆大小 ，32bit  1.5-2G  64bit  可以超过 2G  新版的JDK 每个线程的堆大小在1M
	改变这个线程所占用的堆大小，可以生成更多的线程，一般项目里线程数不能超过5000个

56：tomcat优化
	一、Tomcat内存优化
		Tomcat内存优化主要是对 tomcat 启动参数优化，我们可以在 tomcat 的启动脚本 
		catalina.sh 中设置 java_OPTS 参数，
		-server 启用jdk 的 server 版； 
		-Xms java虚拟机初始化时的最小内存； 
		-Xmx java虚拟机可使用的最大内存； 
		-XX: PermSize 内存永久保留区域 
		-XX:MaxPermSize 内存最大永久保留区域 
		配置说明模板：
		JAVA_OPTS=’-Xms1024m -Xmx2048m -XX: PermSize=256M -XX:MaxNewSize=256m 
		-XX:MaxPermSize=256m’
	二、Tomcat并发优化
		server.xml
		　<Connector port="9027"
		　　protocol="HTTP/1.1"
		　　maxHttpHeaderSize="8192"
		　　maxThreads="1000"
		　　minSpareThreads="100"
		　　maxSpareThreads="1000"
		　　minProcessors="100"
		　　maxProcessors="1000"
		　　enableLookups="false"
		　　URIEncoding="utf-8"
		　　acceptCount="1000"
		　　redirectPort="8443"
		　　disableUploadTimeout="true"/>
		在Connector标签里配置
		maxThreads 客户请求最大线程数 
		minSpareThreads Tomcat初始化时创建的 socket 线程数 
		maxSpareThreads Tomcat连接器的最大空闲 socket 线程数 
		enableLookups 若设为true, 则支持域名解析，可把 ip 地址解析为主机名 
		redirectPort 在需要基于安全通道的场合，把客户请求转发到基于SSL 的 redirectPort 端口 
		acceptAccount 监听端口队列最大数，满了之后客户请求会被拒绝（不能小于maxSpareThreads ） 
		connectionTimeout 连接超时 
		minProcessors 服务器创建时的最小处理线程数 
		maxProcessors 服务器同时最大处理线程数 
		URIEncoding URL统一编码
	三、Tomcat缓存优化
		　<Connector port="9027"
		　　protocol="HTTP/1.1"
		　　maxHttpHeaderSize="8192"
		　　maxThreads="1000"
		　　minSpareThreads="100"
		　　maxSpareThreads="1000"
		　　minProcessors="100"
		　　maxProcessors="1000"
		　　enableLookups="false"
		　　compression="on"
		　　compressionMinSize="2048"
		　　compressableMimeType="text/html,text/xml,text/javascript,text/css,text/plain"
		　　connectionTimeout="20000"
		　　URIEncoding="utf-8"
		　　acceptCount="1000"
		　　redirectPort="8443"
		　　disableUploadTimeout="true"/>
		compression 打开压缩功能 
		compressionMinSize 启用压缩的输出内容大小，这里面默认为2KB 
		compressableMimeType 压缩类型 
		connectionTimeout 定义建立客户连接超时的时间. 如果为 -1, 表示不限制建立客户连接的时间
	参考文章:http://blog.csdn.net/sxj_world/article/details/78454420
	
57、你们工作中采用什么架构，如何设计，为什么搭建这样的架构，解决了哪些问题
58、jvm优化和tomcat优化你们怎么做的，参数之间配置的关系，并发量如何设计和计算出所需负载均衡服务器
59、高并发你们如何解决的，缓存有哪些，如何设计适合自己的缓存
60、你在项目中涉及到那些需要多线程，线程受那些因素影响，举例说明
61、锁有哪些，线程锁有哪些，多线程中如何合理使用，举例说明
62、分布式锁的原理，进程之间如何共享锁，redis和zk分布式锁的优缺点，举例说明他们适合的场景
63、如何合理设计架构，重构系统如何实现，新系统如何实现，如何让代码重用性更高，让拓展性更好
64、23种设计模式如何在项目应用，6种原则架构中如何考虑，举例说明
65、同步和异步远程调用会出现哪些异常，如何解决重试和异步调用失败的问题
66、业务系统和架构是相互联系的，如何合理的规划业务和架构，根据你的经验举例说明
67、数据库方面：数据库表设计原则、数据库锁、索引的应用优化，举例说明
68、分库分表解决那些问题，带来哪些问题
69、主从复制你们采用哪些技术，mycat用过吗，对事务的支持如何做到最优化配置
70、mycat做分布式数据库如何监控和确保数据同步不丢失
71、mongodb删除功能在高并发中会出现问题吗，你如何解决
72、系统上线后你采用哪些工具进行监控，如何做到容灾设
73、在项目中采用过哪些消息队列，如何进行流式监控，丢失消息如何处理，kafka跟其他的优缺点
74、设计好架构和业务后你如何安排人员，说说你的方案
75、总结一下你对管理中的方法和思路


逻辑思维问题
1：有A B C D 四个少女，她们正在接受训练已便成为预言家，实际上，后来她们之中只有一个成为了
预言家，并在特尔斐城谋得一职位，其余三人，一个当了职业舞蹈家，一个当了宫廷侍女，第三个当
了演奏家，一天，她们四个人在练习预言。
A预言：“B 无论如何也成不了职业舞蹈家”
B预言：“C将成为特尔斐城的预言家”
C预言：“D不会成为演奏家”
D预言：“我将嫁给一个叫阿特的男人”
可是，事实上她们四个人中，只有一个人的预言是正确的，而这个人当了特尔斐城的预言家，能分析出
这四个人的职业吗？

